-- The New York City Taxi & Limousine Commission (TLC) UpGrad Assignment


-- Adding the jar as a pre-requisite to creating a new Hive session and running a Hive query successfully

ADD JAR /opt/cloudera/parcels/CDH/lib/hive/lib/hive-hcatalog-core-1.1.0-cdh5.11.2.jar;

-- Setting the partition environment variables for creating a new partitioned table - pre-requisite

SET hive.exec.max.dynamic.partitions=100000;
SET hive.exec.max.dynamic.partitions.pernode=100000;


-- Check if a table with the same name exists and if "yes" - drop the same before creating a table

drop table nyc_taxi_data_sca;

-- Create an external table "nyc_taxi_data_sca" (Used data types : double, int, string)

create external table if not exists nyc_taxi_data_sca
(
	vendorid	string,
	tpep_pickup_datetime	string,
	tpep_dropoff_datetime	string,
	passenger_count	int,
	trip_distance	double,
	ratecodeid	int,
	store_and_fwd_flag	string,
	pulocationid	string,
	dolocationid	string,
	payment_type	int,
	fare_amount	double,
	extra	double,
	mta_tax	double,
	tip_amount	double,
	tolls_amount	double,
	improvement_surcharge	double,
	total_amount	double
)
	ROW format delimited fields terminated by ','
	location '/common_folder/nyc_taxi_data/'
	tblproperties ("skip.header.line.count"="1")	
	
;

-- Sanity data check - Check for sample data - random 20 rows ordered by total amount

select * from nyc_taxi_data_sca order by total_amount desc limit 20;

-- SECTION 1 : Basic Data Quality Checks

-- QUESTION 1 : How many records has each TPEP provider provided? Write a query that summarises the number of records of each provider.

Select VendorID, count(1) as  TPEP_Provider_Records
From nyc_taxi_data_sca group by VendorID;

-- QUESTION 2 : The data provided is for months November and December only. 
-- Check whether the data is consistent, and if not, identify the data quality issues. 
-- Mention all data quality issues in comments.

-- Based on the checks, the following int/double columns were found having inconsistent data 

-- Below checks have successfully identified inconsistent data and the columns not mentioned below are
-- found to be clean and consistent.

-- Passenger count cannot be a zero value (6824 entires)
select count(*) as invalid_passenger_count from nyc_taxi_data_sca where passenger_count	<= 0;

-- Trip distance cannot be a zero value (7402 entries)
select count(*) as invalid_trip_distance from nyc_taxi_data_sca where trip_distance <= 0;

-- Fare amount cannot be a zero value / less than zero (870 entires)
select count(*) as invalid_fare_amount from nyc_taxi_data_sca where fare_amount <= 0;

-- Extra amount can be zero but cannot be a negative value / less than zero (286 entire)
select count(*) as invalid_extra_amount from nyc_taxi_data_sca where extra < 0;

-- MTA amount can be zero but cannot be a negative value / less than zero (544 entires)
select count(*) as invalid_mta_amount from nyc_taxi_data_sca where mta_tax	< 0;

-- Tip amount can be zero but cannot be a negative value / less than zero (4 entires)
select count(*) as invalid_tip_amount from nyc_taxi_data_sca where tip_amount < 0;

-- Toll amount cannot be a zero or negative value / less than zero (3 entires)
select count(*) as invalid_toll_amount from nyc_taxi_data_sca where tolls_amount < 0;

-- Improvement Surcharge cannot be zero or negative value / less than zero (558 entries)
select count(*) as invalid_improvement_surcharge from nyc_taxi_data_sca where improvement_surcharge < 0;

-- Total amount cannot be a zero or negative value / less than zero (681 entires)
select count(*) as invalid_total_amount from nyc_taxi_data_sca where total_amount <= 0;

-- QUESTION 3 : You might have encountered unusual or erroneous rows in the dataset. 
-- Can you conclude which vendor is doing a bad job in providing the records using different columns of the dataset? 

select vendorid, count(*) as ERRONEOUS_RECORDS
from nyc_taxi_data_sca where (tpep_pickup_datetime is null or 
tpep_dropoff_datetime is null or passenger_count <= 0 or trip_distance <= 0 or ratecodeid is null or 
pulocationid is null or dolocationid is null or payment_type is null or fare_amount <= 0 or 
extra < 0 or mta_tax < 0 or tip_amount	< 0 or tolls_amount < 0 or improvement_surcharge < 0 or 
total_amount <= 0)
group by vendorid
order by vendorid;
	
-- Based on the above analysis results
-- Vendor 1 is having more error data and doing a bad job in providing records as compared to Vendor 2.

-- SECTION 2 : Analysis-I

-- Check if a table with the same name exists and if "yes" - drop the same before creating a table

drop table nyc_taxi_data_sca_part;

-- Creating the ORC partitioned table based on month and day (Year not required as the data belongs to only 2017yr)

CREATE EXTERNAL TABLE IF NOT EXISTS nyc_taxi_data_sca_part(vendorid string, tpep_pickup_datetime string, tpep_dropoff_datetime string,
passenger_count int, trip_distance double,ratecodeid int, store_and_fwd_flag string, pulocationid string, dolocationid string,
payment_type int, fare_amount double, extra double, mta_tax double, tip_amount double, tolls_amount double,
improvement_surcharge double, total_charge double) PARTITIONED BY (mnth int, mday int)
LOCATION '/user/hive/warehouse/nyc_taxi_data_sca_part';

-- Insert records into newly created partitioned nyc_taxi_data_sca_part table

INSERT OVERWRITE TABLE nyc_taxi_data_sca_part PARTITION(mnth, mday)
select vendorid, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance, ratecodeid, store_and_fwd_flag,
pulocationid, dolocationid, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount,
improvement_surcharge, total_amount, month(tpep_pickup_datetime)as mnth, day(tpep_pickup_datetime)as mday
from nyc_taxi_data_sca where year(tpep_pickup_datetime)=2017 and month(tpep_pickup_datetime) in (11,12) and 
year(tpep_dropoff_datetime)=2017 and month(tpep_dropoff_datetime) in (11,12) and unix_timestamp(tpep_pickup_datetime) < unix_timestamp(tpep_dropoff_datetime) and 
passenger_count > 0 and trip_distance > 0 and ratecodeid > 0 and payment_type > 0 and fare_amount > 0 and extra >=0 and 
mta_tax >=0  and tip_amount>=0 and tolls_amount >= 0 and improvement_surcharge >=0 and total_amount > 0;

-- QUESTION 1 : Compare the overall average fare (in dollars) per trip for November and December.

select mnth as Month, avg(fare_amount) as Average_Fare_Amount
from nyc_taxi_data_sca_part group by mnth order by mnth;

-- November Average Fare Amount : 13.0518 (rounded)
-- December Average Fare Amount : 12.8418 (rounded)

-- QUESTION 2 : Explore the ‘number of passengers per trip’ - how many trips are made by each level of ‘Passenger_count’? 
-- 				Do most people travel solo or with other people?

select passenger_count as Total_Passengers, count(*)as Row_Count
from nyc_taxi_data_sca_part group by passenger_count order by passenger_count;

-- Comparing solo passengers vs passengers > 1 in the trips

SELECT sum(CASE when passenger_count = 1 THEN 1 ELSE 0 END)as Solo_Trips, 
sum(CASE when passenger_count != 1 THEN 1 ELSE 0 END)as Group_Trips
from nyc_taxi_data_sca_part;

-- Solo Trips (819776) is clearly a preferred choice as compared to group trips (338069)

-- QUESTION 3 : Which is the most preferred mode of payment?

-- Checking the available payment types for the trips

-- According to Data Dictionary
-- 1= Credit card, 2= Cash, 3= No charge, 4= Dispute, 5= Unknown, 6= Voided trip

select payment_type as Mode_of_Payment, count(*) as Row_Count
from nyc_taxi_data_sca_part group by payment_type order by Row_Count desc;

-- It is clear that the payment type "1-Credit Card" is the most preferred due to its highest count of 782066.

-- QUESTION 4: What is the average tip paid per trip? Compare the average tip with the 25th, 50th and 75th percentiles and 
-- comment whether the ‘average tip’ is a representative statistic (of the central tendency) of ‘tip amount paid’. 
-- Hint: You may use percentile_approx(DOUBLE col, p): Returns an approximate pth percentile of a numeric column 
-- (including floating point types) in the group.

-- As per Data Dictionary, we can ignore tip amount (0) for payment type is "Cash"

select count(*) as No_Tips_For_Cash from nyc_taxi_data_sca_part where tip_amount=0 and payment_type=2;

-- A total of 369946 records can be discarded before we calculate average tip paid.

select avg(tip_amount) as Average_Tip_Paid, 
percentile_approx(tip_amount,0.25) as 25thP_Avg_Tip, 
percentile_approx(tip_amount, 0.50) as 50thP_Avg_Tip, 
percentile_approx(tip_amount, 0.75) as 75thP_Avg_Tip
from nyc_taxi_data_sca_part
where payment_type != 2;

-- Average tip paid is 2.7148, 25th percentile - 1.3415, 50th percentile - 1.9955, 75th percentile - 3.05033
-- Average tip can be a representative statistic of 'tip amount paid'

-- QUESTION 5 : Explore the ‘Extra’ (charge) variable - what fraction of total trips have an extra charge is levied?

-- Checking for total count of trips where extra amount was not charged (621236)

select extra as Extra_Amount, count(*)as Row_Count
from nyc_taxi_data_sca_part where extra=0 group by extra;

-- Checking for total count of trips where extra amount was charged (>0) (536609)

select extra as Extra_Amount, count(*) as Row_Count
from nyc_taxi_data_sca_part where extra>0 group by extra;

-- Trips with no extra charges > Accumulated trips with extra charges > 0

-- SECTION 3 : ANALYSIS - II

-- QUESTION 1 : What is the correlation between the number of passengers on any given trip, and 
-- the tip paid per trip? Do multiple travellers tip more compared to solo travellers? Hint: Use CORR(Col_1, Col_2)

-- As per Data Dictionary, we can ignore tip amount (0) for payment type is "Cash"

select count(*) as No_Tips_For_Cash from nyc_taxi_data_sca_part where tip_amount=0 and payment_type=2;

-- A total of 369946 records can be discarded before we calculate the correlation between Passengers travelled vs Tip amount (>0)

select corr(passenger_count, tip_amount) as Passengers_VS_Tip, avg(CASE when passenger_count=1 then tip_amount else null end) as Solo_Tips, 
avg(CASE when passenger_count != 1 then tip_amount else null end) as Group_Tips
from nyc_taxi_data_sca_part where payment_type != 2;

-- Correlation between Passengers Vs Tip paid : 0.009 (Weak correlation overall)
-- Average tip paid by group passengers (2.777) is slightly higher than the solo passenger's tip (2.6902)

-- QUESTION 2: Segregate the data into five segments of ‘tip paid’: [0-5), [5-10), [10-15) , [15-20) and >=20. 
-- Calculate the percentage share of each bucket (i.e. the fraction of trips falling in each bucket).

select Tip_Segments, count(*)as Row_Count, max(records_count)as Total_Rows, 
round(count(*)/max(records_count),5)as Overall_Tip_Segment
from (select kcol.*, count(*) over () records_count,
CASE when tip_amount >= 0 and tip_amount <5 then '0_Bucket_5' 
when tip_amount >=5 and tip_amount < 10 then '5_Bucket_10'
when tip_amount >=10 and tip_amount < 15 then '10_Bucket_15'
when tip_amount >=15 and tip_amount < 20 then '15_Bucket_20'
else '20above_Bucket' 
end as Tip_Segments 
from orc_parted_taxifare kcol)as temp_nyc
where temp_nyc.payment_type != 2
group by Tip_Segments
order by Overall_Tip_Segment desc;

-- Have again discarded the tip amount rows for payment type = cash
-- Tip segments / bucket results are as follows :
-- Tip paid [0-5] 	- 60.24%
-- Tip paid [5-10] 	- 5.65%
-- Tip paid [10-15] - 1.83%
-- Tip paid [15-20] - 0.22%
-- Tip paid [>20] 	- 0.08%

-- The remaining constitues the payment type cash with no tips paid - which has been explicitly not considered for segmentation / bucketing.

-- QUESTION 3: Which month has a greater average ‘speed’ - November or December? 
-- Note that the variable ‘speed’ will have to be derived from other metrics. 
-- Hint: You have columns for distance and time.

-- Formula used to derive average speed :
-- Step 1 : Total Duration = Drop off time - Pick Up Time
-- Step 2 : T1 = Overall trip distance / Total Duration
-- Step 3 : Final = T1 / 3600 (3600 seconds in 1hr)

SELECT avg(CASE when mnth=11 THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) ELSE null end) as Avg_Speed_Nov, 
avg(CASE when mnth=12 THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) ELSE null end) as Avg_Speed_Dec
from nyc_taxi_data_sca_part;

-- Average speed in December month (11.0951) is found to be slightly higher compared to Average speed in November Month (11.000) 

-- QUESTION 4 : Analyse the average speed of the most happening days of the year, i.e. 31st December (New year’s eve) and 25th December (Christmas) and 
-- compare it with the overall average

-- Calculating Average Speed - Christmas - Dec 25th (15.265)

SELECT avg(CASE when mnth=12 and mday=25 THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) 
ELSE null end) as Avg_Speed_Christmas from nyc_taxi_data_sca_part;

-- Calculating Average Speed - New Year - Dec 31st (13.269)

SELECT avg(CASE when mnth=12 and mday=31 THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) 
ELSE null end) as Avg_Speed_NewYear from nyc_taxi_data_sca_part;

-- Calculating the Overall Average Speed (8.525)

select avg((trip_distance/(unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) 
as Overall_Avg_Speed from nyc_taxi_data_sca_part;

-- Both the average speeds of Nov and Dec is found to be higher than compared to the overall average speed.
